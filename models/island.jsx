/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: nimzu (https://sketchfab.com/nimzuk)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
Title: Fox's islands
*/

import { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import islandScene from "../assets/3d/mainScene.glb";
import { a } from "@react-spring/three";

const Island = ({
  currentState,
  isRotating,
  setCurrentState,
  setIsRotating,
  setCurrentAnimation,
  ...props
}) => {
  const islandRef = useRef();
  const { gl, viewport } = useThree();
  const { nodes, materials } = useGLTF(islandScene);
  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95;

  const handlePointerDown = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);
    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    lastX.current = clientX;
  };
  const handlePointerUp = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  };
  const handlePointerMove = (e) => {
    e.stopPropagation();
    e.preventDefault();
    if (isRotating) {
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;
      const delta = (clientX - lastX.current) / viewport.width;
      islandRef.current.rotation.y += delta * 0.01 * Math.PI;
      lastX.current = clientX;
      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  };

  const handleKeyDown = (e) => {
    if (e.key === "ArrowLeft") {
      if (!isRotating) setIsRotating(true);
      islandRef.current.rotation.y += 0.01 * Math.PI;
      rotationSpeed.current = 0.0125;
    } else if (e.key === "ArrowRight") {
      if (!isRotating) setIsRotating(true);
      islandRef.current.rotation.y -= 0.01 * Math.PI;
      rotationSpeed.current = -0.0125;
    }
  };
  const handleKeyUp = (e) => {
    if (e.key === "ArrowLeft" || e.key === "ArrowRight") setIsRotating(false);
  };

  useFrame((state, delta) => {
    if (!isRotating) {
      // Automatic rotation
      const autoRotationSpeed = -0.0055;
      islandRef.current.rotation.y += autoRotationSpeed;

      // Damping for automatic rotation
      rotationSpeed.current *= dampingFactor;
      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;
      }
      islandRef.current.rotation.y += rotationSpeed.current;

      // Track time spent in the current state
      if (currentState !== null) {
        const stateDuration = 1; // 1 second pause in each state
        state.timeInCurrentState += delta;

        if (state.timeInCurrentState >= stateDuration) {
          state.timeInCurrentState = 0; // Reset time
          setCurrentState(null); // Pause: Set currentState to null
        }
      }
    }
    // Manual rotation
    const rotation = islandRef.current.rotation.y;
    const normalizedRotation =
      ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

    switch (true) {
      case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
        setCurrentState(4);
        setCurrentAnimation("walk");

        break;
      case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
        setCurrentState(3);
        setCurrentAnimation("Attack");

        break;
      case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
        setCurrentState(2);
        setCurrentAnimation("Hurted");

        break;
      case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
        setCurrentState(1);
        setCurrentAnimation("Walk");

        break;
      default:
        setCurrentState(null);
    }
  });

  useEffect(() => {
    const canvas = gl.domElement;

    canvas.addEventListener("pointerdown", handlePointerDown);
    canvas.addEventListener("pointerup", handlePointerUp);
    canvas.addEventListener("pointermove", handlePointerMove);
    canvas.addEventListener("keydown", handleKeyDown);
    canvas.addEventListener("keyup", handleKeyUp);
    return () => {
      canvas.removeEventListener("pointerdown", handlePointerDown);
      canvas.removeEventListener("pointerup", handlePointerUp);
      canvas.removeEventListener("pointermove", handlePointerMove);
      canvas.removeEventListener("keydown", handleKeyDown);
      canvas.removeEventListener("keyup", handleKeyUp);
    };
  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);

  return (
    <a.group {...props} ref={islandRef}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.__MeshNode__.geometry}
        material={nodes.__MeshNode__.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_4.geometry}
        material={nodes.Object_4.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.__MeshNode___1.geometry}
        material={nodes.__MeshNode___1.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.__MeshNode___2.geometry}
        material={nodes.__MeshNode___2.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_8.geometry}
        material={nodes.Object_8.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_12.geometry}
        material={nodes.Object_12.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_16.geometry}
        material={nodes.Object_16.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_48.geometry}
        material={nodes.Object_48.material}
      />
    </a.group>
  );
};

export default Island;
